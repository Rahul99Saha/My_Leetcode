//Brute force : if it has 0 then place the row with -1
#include <bits/stdc++.h>
using namespace std;
class Solution {
public:
    void mark_Row(vector<vector<int>>& matrix,int i,int m,int n)
    {
        
        for(int j=0;j<n;j++)
        {
            if(matrix[i][j]!=0)
            matrix[i][j]=-999;
        }
    }
    void mark_Column(vector<vector<int>>& matrix,int j,int m,int n)
    {
        for(int i=0;i<m;i++)
        {
            if(matrix[i][j]!=0)
            matrix[i][j]=-999;
        }
    }
    vector<vector<int>> setZeroes(vector<vector<int>>& matrix) 
    {
        int m = matrix.size();
        int n = matrix[0].size();
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(matrix[i][j]==0)
                {
                    mark_Row(matrix,i,m,n);
                    mark_Column(matrix,j,m,n);
                }
            }
        }
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(matrix[i][j]==-999)
                matrix[i][j]=0;
            }
        }
        return matrix;
    }
};



Better Approach : By taking a row and col matrix
//Better Approach : if 
class Solution {
public:
    vector<vector<int>> setZeroes(vector<vector<int>>& matrix) 
    {
        int m=matrix.size();
        int n=matrix[0].size();
        vector<int>row(m,0);
        vector<int>col(n,0);
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(matrix[i][j]==0){
                row[i]=1;
                col[j]=1;
                }
            }
        }
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(row[i]==1 || col[j]==1)
                matrix[i][j]=0;
            }
        }
        return matrix;
    }
};

Optimal Approach : Best approach not using row or col matrix to store.


